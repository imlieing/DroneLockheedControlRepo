<launch>
  <arg name="use_dynamics" default="1" />
  <arg name="use_external_renderer" default="0" />
  <arg name="ignore_collisions" default="false" />
  <arg name="render_stereo" default="0" />
  <arg name="run_challenges" default="1" />
  <arg name="gate_locations" default=""/>
  <arg name="render_quality" default="Fastest"/>

<!-- OUR CODE BEGIN HERE -->

    <group ns="/image_processing_nodes">
        <!-- Start image processing nodes-->
      <node name="pathplanning" pkg="pathplanning" type="imageProcessing.py" output="screen">
      <remap from="processing/rateThrust" to="/pathplanning/input/rateThrust"/>

      </node>
    </group>

      <node name="controller" pkg="pid" type="controller" ns="rateThrustZ" output="screen" >
        <param name="Kp" value="1.0" />
        <param name="Ki" value="0.0" />
        <param name="Kd" value="0.0" />
        <param name="upper_limit" value="10" />
        <param name="lower_limit" value="-10" />
        <param name="windup_limit" value="10" />
        <param name="max_loop_frequency" value="100.0" />
        <param name="min_loop_frequency" value="100.0" />
        <remap from="setpoint" to="/output/pathRateThrustZ" />
        <remap from="state" to="/output/imuRateThrustZ" />
       </node>

       <node name="controller" pkg="pid" type="controller" ns="rateThrustRoll" output="screen" >
         <param name="Kp" value="1.0" />
         <param name="Ki" value="0.0" />
         <param name="Kd" value="0.0" />
         <param name="upper_limit" value="10" />
         <param name="lower_limit" value="-10" />
         <param name="windup_limit" value="10" />
         <param name="max_loop_frequency" value="100.0" />
         <param name="min_loop_frequency" value="100.0" />
         <remap from="setpoint" to="/output/pathRateThrustRoll" />
         <remap from="state" to="/output/imuRateThrustRoll" />
        </node>

        <node name="controller" pkg="pid" type="controller" ns="rateThrustPitch" output="screen" >
          <param name="Kp" value="1.0" />
          <param name="Ki" value="0.0" />
          <param name="Kd" value="0.0" />
          <param name="upper_limit" value="10" />
          <param name="lower_limit" value="-10" />
          <param name="windup_limit" value="10" />
          <param name="max_loop_frequency" value="100.0" />
          <param name="min_loop_frequency" value="100.0" />
          <remap from="setpoint" to="/output/pathRateThrustPitch" />
          <remap from="state" to="/output/imuRateThrustPitch" />
         </node>

         <node name="controller" pkg="pid" type="controller" ns="rateThrustYaw" output="screen" >
           <param name="Kp" value="1.0" />
           <param name="Ki" value="0.0" />
           <param name="Kd" value="0.0" />
           <param name="upper_limit" value="10" />
           <param name="lower_limit" value="-10" />
           <param name="windup_limit" value="10" />
           <param name="max_loop_frequency" value="100.0" />
           <param name="min_loop_frequency" value="100.0" />
           <remap from="setpoint" to="/output/pathRateThrustYaw" />
           <remap from="state" to="/output/imuRateThrustYaw" />
          </node>

            <node name="imu_and_pathplanning_separator" pkg="autonomous_control" type="pid.py" output="screen">
          </node>

    <group ns="/control_nodes">
      <!-- Start autonomous nodes -->
      <node name="autonomous_control" pkg="autonomous_control" type="autonomous.py" output="screen">
        <!--<rosparam file="$(find universal_teleop)/launch/example_input_map.yml"/>  -->
        <remap from="output/rateThrust" to="/uav/input/rateThrust"/>
      </node>
    </group>
<!-- OUR CODE ENDS HERE -->
  <!--include core flightgoggles launch file-->
  <param name="/use_sim_time" value="true" />

  <!-- Read required yaml files" / -->
  <rosparam command="load" file="$(find flightgoggles)/config/drone/drone.yaml"/>
  <rosparam command="load" file="$(find flightgoggles)/config/challenges/nominal_gate_locations.yaml"/>

  <!-- Environment Creator -->
  <!-- flightgoggles_uav_dynamics simulator -->
  <!--Will not be run if playing back previous flight from rosbag-->
  <node name="flightgoggles_uav_dynamics" pkg="flightgoggles_uav_dynamics" type="node"
        if="$(arg use_dynamics)" output="screen">
    <param name="ignore_collisions" type="bool" value="$(arg ignore_collisions)" />
  </node>

  <!-- FlightGoggles Renderer -->
  <!-- Only run renderer if not using external renderer -->
  <group unless="$(arg use_external_renderer)">
      <node name="flightgogglesRenderer" pkg="flightgoggles" type="FlightGoggles.x86_64" if="$(eval gate_locations == '')" respawn="true"
      args="-screen-quality $(arg render_quality)"/>
      <!-- Perturb gate locations if needed -->
      <node name="flightgogglesRenderer" pkg="flightgoggles" type="FlightGoggles.x86_64" unless="$(eval gate_locations == '')" respawn="true"
      args="-screen-quality $(arg render_quality) -obstacle-perturbation-file '$(find flightgoggles)/config/perturbations/perturbed_gates_$(arg gate_locations).yaml'"/>
  </group>


  <!-- FlightGoggles ROS Bridge -->
  <node name="flightgoggles_ros_bridge" pkg="flightgoggles_ros_bridge" type="ROSClient" output="screen" >
  <param name="render_stereo" type="bool" value="$(arg render_stereo)" />
  </node>

  <!-- FlightGoggles IR Marker visualizer -->
  <node name="flightgoggles_marker_visualizer" pkg="flightgoggles_marker_visualizer" type="flightgoggles_marker_visualizer" />

  <!--Run RVIZ for visualization-->
  <node type="rviz" name="rviz" pkg="rviz" args="-d $(find flightgoggles)/rviz/third_person_drone_follower.rviz" unless="$(arg render_stereo)"/>
  <node type="rviz" name="rviz" pkg="rviz" args="-d $(find flightgoggles)/rviz/third_person_drone_follower_stereo.rviz" if="$(arg render_stereo)"/>

  <!--Run rqt_plot for plotting readings from the laser range finder-->
  <!-- <node type="rqt_plot" name="laser_rangefinder_plotter" pkg="rqt_plot" args="topics /uav/sensors/downward_laser_rangefinder/range"/> -->

  <!--Static transforms for 32cm stereo baseline -->
  <node pkg="tf2_ros" type="static_transform_publisher"
        name="camera_left_link" args="0 0.0 0 -1.57079632679 0 -1.57079632679 uav/imu uav/camera/left  " unless="$(arg render_stereo)"/>
  <node pkg="tf2_ros" type="static_transform_publisher"
        name="camera_left_link"  args="0  0.16 0 -1.57079632679 0 -1.57079632679 uav/imu uav/camera/left  " if="$(arg render_stereo)"/>
  <node pkg="tf2_ros" type="static_transform_publisher"
        name="camera_right_link" args="0 -0.16 0 -1.57079632679 0 -1.57079632679 uav/imu uav/camera/right  " if="$(arg render_stereo)"/>

    <!-- Add static transforms for each camera that translate camera into X forward config. -->
    <node pkg="tf2_ros" type="static_transform_publisher"
        name="camera_left_link_nwu"  args="0  0 0 1.57079632679 -1.57079632679 0 uav/camera/left uav/camera/left/nwu  " />
    <node pkg="tf2_ros" type="static_transform_publisher"
        name="camera_right_link_nwu" args="0  0 0 1.57079632679 -1.57079632679 0 uav/camera/right uav/camera/right/nwu  " if="$(arg render_stereo)"/>


  <param name="/uav/camera/render_stereo" value="$(arg render_stereo)" />

  <!--Static transform for ENU to NED world-->
  <node pkg="tf2_ros" type="static_transform_publisher"
        name="world_ned_link" args="0 0 0 1.57079632679 3.14159265359 0 'world' 'world/ned'"/>
</launch>
